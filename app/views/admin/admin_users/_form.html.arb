active_admin_form_for [ :admin, resource ] do |f|
  f.semantic_errors(*f.object.errors.attribute_names)
  tabs do
    tab "Profile" do
      inputs do
        f.input :avatar, as: :file
        f.input :first_name
        f.input :last_name
        f.input :title
        f.input :bio, as: :text
      end
    end

    tab "Security" do
      inputs do
        f.input :active, as: :boolean
        f.input :username
        f.input :email
        f.input :password
        f.input :password_confirmation
      end

      # MFA Section
      # panel "Multi-Factor Authentication" do
      #   div class: "mfa-panel" do
      #     if resource.mfa_enabled?
      #       div class: "mfa-status enabled" do
      #         para "✅ MFA is enabled for this account"
      #         para "This user must provide a verification code when signing in."
      #       end
      #     else
      #       div class: "mfa-status disabled" do
      #         para "⚠️ MFA is not enabled"
      #         para "Enable MFA to add an extra layer of security."
      #         para do
      #           button "Setup MFA",
      #                  type: "button",
      #                  class: "btn btn-primary",
      #                  data: { modal_target: "mfa-setup-modal", modal_toggle: "mfa-setup-modal" }
      #         end
      #       end
      #     end
      #   end
      # end
    end

    tab "Contact" do
      tabs do
        tab "Addresses" do
          f.inputs do
            # f.has_many :addresses, heading: false, allow_destroy: policy(resource).delete_address? do |a|
            f.has_many :addresses, heading: false, allow_destroy: true do |a|
              a.input :id, as: :hidden
              a.input :label, as: :select, collection: SystemContactTypeLabel.address.pluck(:label).map { |l| [ l.humanize, l ] }
              a.input :address
              a.input :address_line_1
              a.input :address_line_2
              a.input :city
              a.input :state, as: :select, collection: CS.states(:US).invert
              a.input :zip
              a.input :country, as: :select, collection: CS.countries.invert
              a.input :time_zone
              a.input :url
              a.input :default
              a.input :active
            end
          end
        end
        tab "Emails" do
          f.inputs do
            # f.has_many :emails, heading: false, allow_destroy: policy(resource).delete_email? do |e|
            f.has_many :emails, heading: false, allow_destroy: true do |e|
              disabled = e.object.label == "authentication" && !e.object.new_record?
              e.input :id, as: :hidden
              e.input :label, as: :select, collection: SystemContactTypeLabel.email.pluck(:label).map { |l| [ l.humanize, l ] }, input_html: { disabled: disabled }
              e.input :email, input_html: { autocomplete: "off", disabled: disabled }
              unless disabled
                e.input :default
                e.input :active
              end
            end
          end
        end
        tab "Phones" do
          f.inputs do
            # f.has_many :phones, heading: false, allow_destroy: policy(resource).delete_phone? do |ph|
            f.has_many :phones, heading: false, allow_destroy: true do |ph|
              disabled = ph.object.label == "authentication" && !ph.object.new_record?
              ph.input :id, as: :hidden
              ph.input :label, as: :select, collection: SystemContactTypeLabel.phone.pluck(:label).map { |l| [ l.humanize, l ] }, input_html: { disabled: disabled }
              ph.input :phone, input_html: { disabled: disabled }
              unless disabled
                ph.input :default
                ph.input :active
              end
            end
          end
        end
      end
    end

    tab "Preferences" do
      inputs do
        f.input :preferred_language, as: :select,
          collection: I18n.available_locales.map { |locale|
            [ flag_for_locale(locale) + " " + I18n.t("locales.#{locale}"), locale.to_s ]
          }
      end
    end
  end

  f.actions

  # Include OTP Setup Modal
  if resource.persisted?
    unless resource.otp_required_for_login?
      div do
        render partial: "admin/admin_users/otp/setup", locals: { resource: resource }
      end
    end


    if flash[:otp_backup_codes].present?
      div do
        render partial: "admin/admin_users/otp/backup_codes", locals: { backup_codes: flash[:otp_backup_codes] }
      end
    end
  end
end
